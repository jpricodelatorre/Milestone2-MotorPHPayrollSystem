package ms2payrollsystem;

import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * 
 *   PERSON & LEAVE CLASSES
 * 
 */

// Abstract class for Person
abstract class PersonClass {
    private String firstName;
    private String lastName;
    private String address;

    // Constructor
    public PersonClass(String firstName, String lastName, String address) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
    }

    // Encapsulation Getter and Setter methods
    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getAddress() {
        return address;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    // Display method
    public void displayInfo() {
        System.out.println("First Name: " + firstName);
        System.out.println("Last Name: " + lastName);
        System.out.println("Address: " + address);
    }

    // Abstract method for requesting leave
    public abstract void requestLeave();
}

// Class to handle leave management
class LeaveManagement {
    private int annualLeaveBalance;
    private int sickLeaveBalance;

    // Constructor
    public LeaveManagement(int annualLeaveBalance, int sickLeaveBalance) {
        this.annualLeaveBalance = annualLeaveBalance;
        this.sickLeaveBalance = sickLeaveBalance;
    }

    // Encapsulation - Getter and Setter methods
    public int getAnnualLeaveBalance() {
        return annualLeaveBalance;
    }

    public int getSickLeaveBalance() {
        return sickLeaveBalance;
    }

    public void setAnnualLeaveBalance(int annualLeaveBalance) {
        this.annualLeaveBalance = annualLeaveBalance;
    }

    public void setSickLeaveBalance(int sickLeaveBalance) {
        this.sickLeaveBalance = sickLeaveBalance;
    }

    // Request leave method with audit logging
    public boolean requestLeave(String leaveType, int days, String personName) {
        boolean leaveApproved = false;
        
        if (leaveType.equalsIgnoreCase("Annual") && days <= annualLeaveBalance) {
            annualLeaveBalance -= days;
            leaveApproved = true;
        } else if (leaveType.equalsIgnoreCase("Sick") && days <= sickLeaveBalance) {
            sickLeaveBalance -= days;
            leaveApproved = true;
        }

        // Log the leave request to the audit system
        LeaveAudit.logLeaveRequest(personName, leaveType + " Leave", days, leaveApproved);
        return leaveApproved;
    }
}

// Leave Audit class to log leave requests
class LeaveAudit {
    // List to hold the audit logs
    private static List<String> auditLogs = new ArrayList<>();

    // Method to log the leave request
    public static void logLeaveRequest(String personName, String leaveType, int daysRequested, boolean leaveApproved) {
        String status = leaveApproved ? "Approved" : "Denied";
        String logEntry = personName + " - Leave Request - Type: " + leaveType + " | Days: " + daysRequested + " | Status: " + status;
        auditLogs.add(logEntry);
    }

    // Method to print all leave request audit logs
    public static void generateAuditReport() {
        System.out.println("\n==== Leave Audit Report ====");
        if (auditLogs.isEmpty()) {
            System.out.println("No leave requests have been logged yet.");
        } else {
            for (String log : auditLogs) {
                System.out.println(log);
            }
        }
    }
}

/**
 * 
 *   EMPLOYEE, MANAGER, HR, ADMIN
 * 
 */

// Employee class (inherits from PersonClass)
class Employee extends PersonClass {
    private String employeeID;
    private LeaveManagement leaveManagement;

    // Constructor
    public Employee(String firstName, String lastName, String address, String employeeID, int annualLeave, int sickLeave) {
        super(firstName, lastName, address);
        this.employeeID = employeeID;
        this.leaveManagement = new LeaveManagement(annualLeave, sickLeave);
    }

    // Encapsulation - Getter and Setter methods
    public String getEmployeeID() {
        return employeeID;
    }

    public LeaveManagement getLeaveManagement() {
        return leaveManagement;
    }

    public void setEmployeeID(String employeeID) {
        this.employeeID = employeeID;
    }

    // Polymorphism - Overriding requestLeave for Employee
    @Override
    public void requestLeave() {
        System.out.println(getFirstName() + " " + getLastName() + " (Employee) is requesting leave.");
        if (leaveManagement.requestLeave("Annual", 5, getFirstName() + " " + getLastName())) {
            System.out.println("Leave granted for 5 days of annual leave.");
        } else {
            System.out.println("Leave request denied due to insufficient annual leave balance.");
        }
    }

    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Employee ID: " + employeeID);
    }
}

// Manager class (inherits from PersonClass)
class Manager extends PersonClass {
    private String department;
    private LeaveManagement leaveManagement;

    // Constructor
    public Manager(String firstName, String lastName, String address, String department, int annualLeave, int sickLeave) {
        super(firstName, lastName, address);
        this.department = department;
        this.leaveManagement = new LeaveManagement(annualLeave, sickLeave);
    }

    // Encapsulation - Getter and Setter methods
    public String getDepartment() {
        return department;
    }

    public LeaveManagement getLeaveManagement() {
        return leaveManagement;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    // Polymorphism - Overriding requestLeave for Manager
    @Override
    public void requestLeave() {
        System.out.println(getFirstName() + " " + getLastName() + " (Manager) is requesting leave.");
        if (leaveManagement.requestLeave("Sick", 3, getFirstName() + " " + getLastName())) {
            System.out.println("Leave granted for 3 days of sick leave.");
        } else {
            System.out.println("Leave request denied due to insufficient sick leave balance.");
        }
    }

    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Department: " + department);
    }
}

// HR Manager class (inherits from PersonClass)
class HRManager extends PersonClass {
    private String department;

    // Constructor
    public HRManager(String firstName, String lastName, String address, String department) {
        super(firstName, lastName, address);
        this.department = department;
    }

    // Encapsulation - Getter and Setter methods
    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    // Overriding requestLeave for HR Manager (they approve leave)
    @Override
    public void requestLeave() {
        System.out.println(getFirstName() + " " + getLastName() + " (HR Manager) is reviewing the leave request.");
        // Here, HR Manager can approve leave requests, perform additional tasks, or report.
        System.out.println("Leave request approved.");
    }

    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Department: " + department);
    }
}

// Admin class (inherits from PersonClass)
class Admin extends PersonClass {

    public Admin(String firstName, String lastName, String address) {
        super(firstName, lastName, address);
    }

    @Override
    public void requestLeave() {
        System.out.println("Admin has full control over the system but doesn't request leave.");
    }

    public void manageEmployee(Employee employee) {
        System.out.println("Admin is managing Employee: " + employee.getFirstName() + " " + employee.getLastName());
    }

    public void manageHRManager(HRManager hrManager) {
        System.out.println("Admin is managing HR Manager: " + hrManager.getFirstName() + " " + hrManager.getLastName());
    }

    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Admin has full control over the system.");
    }
}

/**
 * 
 *   PAYROLL & TIME LOGGING
 * 
 */

class Payroll {
    public static void calculatePayroll(Employee employee) {
        double baseSalary = 50000; // Base salary for employees
        double deductions;

        // Example: each day of remaining annual leave = $50 deduction
        // (This is just a demonstration; adjust logic as needed.)
        deductions = employee.getLeaveManagement().getAnnualLeaveBalance() * 50;
        double finalSalary = baseSalary - deductions;

        System.out.println("Payroll Report for " + employee.getFirstName() + " " + employee.getLastName());
        System.out.println("Base Salary: $50,000");
        System.out.println("Deductions: $" + deductions);
        System.out.println("Final Salary: $" + finalSalary);
    }
}

class TimeLogging {
    public static void logTime(Employee employee, int hoursWorked) {
        System.out.println(employee.getFirstName() + " " + employee.getLastName() + " worked " + hoursWorked + " hours this week.");
    }
}

/**
 * 
 *   ORIGINAL CONSOLE MAIN
 * 
 */

public class Ms2payrollsystem {

    public static void main(String[] args) {
        // Creating Employee, Manager, HR Manager, and Admin objects
        PersonClass person1 = new Employee("Manuel", "Garcia", "Valero Carpark Building, Makati", "EMP001", 20, 10);
        PersonClass person2 = new Manager("Antonio", "Lim", "San Antonio, Cavite", "IT Department", 30, 15);
        PersonClass person3 = new HRManager("Lucia", "Dee", "Makati, Philippines", "HR");
        PersonClass person4 = new Admin("Mark", "Smith", "Makati, Philippines");

        // Display Employee details
        System.out.println("\n==== Employee Details ====");
        person1.displayInfo();
        person1.requestLeave();
        System.out.println();

        // Display Manager details
        System.out.println("==== Manager Details ====");
        person2.displayInfo();
        person2.requestLeave();
        System.out.println();

        // HR Manager reviewing the leave request
        System.out.println("==== HR Manager Details ====");
        person3.displayInfo();
        person3.requestLeave();
        System.out.println();

        // Admin managing employee and HR
        System.out.println("==== Admin Details ====");
        person4.displayInfo();
        ((Admin) person4).manageEmployee((Employee) person1);
        ((Admin) person4).manageHRManager((HRManager) person3);
        System.out.println();

        // Payroll and Time Logging
        System.out.println("==== Payroll Report ====");
        Payroll.calculatePayroll((Employee) person1);
        System.out.println();

        System.out.println("==== Time Logging ====");
        TimeLogging.logTime((Employee) person1, 40); // Assume 40 hours worked
        System.out.println();

        // Leave Audit and Report
        LeaveAudit.generateAuditReport(); // Generate the leave audit report
    }
}

/**
 * 
 *   SIMPLE GUI EXAMPLE
 * 
 */
class Ms2PayrollGUI extends JFrame {

    private JTextField firstNameField;
    private JTextField lastNameField;
    private JTextField addressField;
    private JTextField employeeIdField;
    private JTextField annualLeaveField;
    private JTextField sickLeaveField;
    private JTextArea outputLog;

    private java.util.List<Employee> employeeList; // We'll store created Employees here

    public Ms2PayrollGUI() {
        super("MS2 Payroll System - GUI");

        employeeList = new ArrayList<>();

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(650, 450);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout(10, 10));

        // Top form panel
        add(createFormPanel(), BorderLayout.NORTH);

        // Middle button panel
        add(createButtonPanel(), BorderLayout.CENTER);

        // Bottom log panel
        add(createLogPanel(), BorderLayout.SOUTH);

        // Some padding
        ((JPanel) getContentPane()).setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
    }

    /**
     * Creates the form panel with text fields for employee data
     */
    private JPanel createFormPanel() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // First Name
        gbc.gridx = 0; gbc.gridy = 0;
        formPanel.add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1; 
        firstNameField = new JTextField(12);
        formPanel.add(firstNameField, gbc);

        // Last Name
        gbc.gridx = 0; gbc.gridy = 1;
        formPanel.add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        lastNameField = new JTextField(12);
        formPanel.add(lastNameField, gbc);

        // Address
        gbc.gridx = 0; gbc.gridy = 2;
        formPanel.add(new JLabel("Address:"), gbc);
        gbc.gridx = 1;
        addressField = new JTextField(12);
        formPanel.add(addressField, gbc);

        // Employee ID
        gbc.gridx = 0; gbc.gridy = 3;
        formPanel.add(new JLabel("Employee ID:"), gbc);
        gbc.gridx = 1;
        employeeIdField = new JTextField(12);
        formPanel.add(employeeIdField, gbc);

        // Annual Leave
        gbc.gridx = 0; gbc.gridy = 4;
        formPanel.add(new JLabel("Annual Leave:"), gbc);
        gbc.gridx = 1;
        annualLeaveField = new JTextField(12);
        formPanel.add(annualLeaveField, gbc);

        // Sick Leave
        gbc.gridx = 0; gbc.gridy = 5;
        formPanel.add(new JLabel("Sick Leave:"), gbc);
        gbc.gridx = 1;
        sickLeaveField = new JTextField(12);
        formPanel.add(sickLeaveField, gbc);

        return formPanel;
    }

    /**
     * Creates the panel with action buttons
     */
    private JPanel createButtonPanel() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 10));

        JButton addEmployeeButton = new JButton("Add Employee");
        JButton requestLeaveButton = new JButton("Request Leave");
        JButton viewPayrollButton = new JButton("View Payroll");
        JButton generateAuditButton = new JButton("Audit Report");

        // Add Employee action
        addEmployeeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleAddEmployee();
            }
        });

        // Request Leave action
        requestLeaveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleRequestLeave();
            }
        });

        // View Payroll action
        viewPayrollButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleViewPayroll();
            }
        });

        // Generate Audit Report (in the log area)
        generateAuditButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleGenerateAudit();
            }
        });

        buttonPanel.add(addEmployeeButton);
        buttonPanel.add(requestLeaveButton);
        buttonPanel.add(viewPayrollButton);
        buttonPanel.add(generateAuditButton);

        return buttonPanel;
    }

    /**
     * Creates the bottom panel with the output log
     */
    private JPanel createLogPanel() {
        JPanel logPanel = new JPanel(new BorderLayout());
        JLabel logLabel = new JLabel("Output Log:");
        logPanel.add(logLabel, BorderLayout.NORTH);

        outputLog = new JTextArea(8, 50);
        outputLog.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputLog);
        logPanel.add(scrollPane, BorderLayout.CENTER);

        return logPanel;
    }

    /**
     * Handler for Add Employee
     */
    private void handleAddEmployee() {
        // Gather data
        String fName = firstNameField.getText().trim();
        String lName = lastNameField.getText().trim();
        String address = addressField.getText().trim();
        String empId = employeeIdField.getText().trim();
        String annualStr = annualLeaveField.getText().trim();
        String sickStr = sickLeaveField.getText().trim();

        // Basic validation
        if (fName.isEmpty() || lName.isEmpty() || address.isEmpty() || empId.isEmpty() 
                || annualStr.isEmpty() || sickStr.isEmpty()) {
            outputLog.append("Error: Please fill in all fields.\n");
            return;
        }

        int annualLeave, sickLeave;
        try {
            annualLeave = Integer.parseInt(annualStr);
            sickLeave = Integer.parseInt(sickStr);
        } catch (NumberFormatException ex) {
            outputLog.append("Error: Annual and Sick leave must be numeric.\n");
            return;
        }

        // Create Employee object
        Employee emp = new Employee(fName, lName, address, empId, annualLeave, sickLeave);
        employeeList.add(emp);

        // Log the addition
        outputLog.append("Added Employee: " + fName + " " + lName + " (ID: " + empId + ")\n");

        // Clear fields (optional)
        firstNameField.setText("");
        lastNameField.setText("");
        addressField.setText("");
        employeeIdField.setText("");
        annualLeaveField.setText("");
        sickLeaveField.setText("");
    }

    /**
     * Handler for Request Leave
     * - For simplicity, we apply leave to the **last** added employee (if any).
     */
    private void handleRequestLeave() {
        if (employeeList.isEmpty()) {
            outputLog.append("No employees in the list.\n");
            return;
        }
        // We'll request leave for the last employee added
        Employee lastEmp = employeeList.get(employeeList.size() - 1);
        lastEmp.requestLeave(); // This calls the overridden method in Employee
        outputLog.append("Leave request attempted for: " + lastEmp.getFirstName() + " " + lastEmp.getLastName() + "\n");
    }

    /**
     * Handler for View Payroll
     * - Again, for simplicity, we show payroll for the last employee added.
     */
    private void handleViewPayroll() {
        if (employeeList.isEmpty()) {
            outputLog.append("No employees in the list.\n");
            return;
        }
        Employee lastEmp = employeeList.get(employeeList.size() - 1);

        // We'll compute payroll using a simplified approach
        double baseSalary = 50000; 
        double ded = lastEmp.getLeaveManagement().getAnnualLeaveBalance() * 50;
        double finalSalary = baseSalary - ded;

        outputLog.append("\nPayroll for " + lastEmp.getFirstName() + " " + lastEmp.getLastName() + ":\n");
        outputLog.append(" - Base Salary: $50,000\n");
        outputLog.append(" - Deductions: $" + ded + "\n");
        outputLog.append(" - Final Salary: $" + finalSalary + "\n\n");
    }

    /**
     * Handler for Generating the Audit Report
     */
    private void handleGenerateAudit() {
        outputLog.append("\n=== Leave Audit Report ===\n");
        // The existing method prints to the console, so let's call it:
        LeaveAudit.generateAuditReport();  // This prints to System.out

        outputLog.append("Check the console for the full audit report.\n\n");
    }

    /**
     * Main method to run the GUI version
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new Ms2PayrollGUI().setVisible(true);
        });
    }
}


